/*
 * Copyright (c) 2014 Howard Hughes Medical Institute.
 * All rights reserved.
 * Use is subject to Janelia Farm Research Campus Software Copyright 1.1
 * license terms (http://license.janelia.org/license/jfrc_copyright_1_1.html).
 */

package org.janelia.it.venkman.config;

import junit.framework.Assert;
import org.janelia.it.venkman.TestUtilities;
import org.janelia.it.venkman.TestWorkingDirectory;
import org.janelia.it.venkman.config.rules.BehaviorLimitedKinematicVariableFunctionList;
import org.janelia.it.venkman.config.rules.IntensityValue;
import org.janelia.it.venkman.config.rules.LEDFlashPattern;
import org.janelia.it.venkman.config.rules.OutOfRangeErrorHandlingMethod;
import org.janelia.it.venkman.config.rules.PositionalVariable;
import org.janelia.it.venkman.config.rules.PositionalVariableFunction;
import org.janelia.it.venkman.config.rules.SingleVariableFunction;
import org.janelia.it.venkman.rules.DefinedEnvironment;
import org.janelia.it.venkman.rules.LarvaStimulusRules;
import org.janelia.it.venkman.rules.ScaledRunIntensity;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import java.util.List;

import static org.janelia.it.venkman.rules.ScaledRunIntensity.DEFAULT_NON_RUN_INTENSITY_VALUE;

/**
 * Tests the {@link ConfigurationManager} class.
 *
 * @author Eric Trautman
 */
public class ConfigurationManagerTest {

    private static final String TEST_GROUP = "test";
    private static TestWorkingDirectory testDirectory;
    private static ConfigurationManager manager;

    private ParameterCollectionId behaviorId;

    @BeforeClass
    public static void setUp() throws Exception {
        testDirectory = new TestWorkingDirectory();
        manager = testDirectory.getManager();
    }

    @AfterClass
    public static void tearDown() {
        // comment this line out if you want to manually review
        // the configuration files generated by these tests
        testDirectory.delete();
    }

    @Test
    public void testConfigurationPersistenceAndRetrieval() throws Exception {

        behaviorId = saveAndRetrieveBehaviorParameters();
        ParameterCollectionId stimulusId =
                saveAndRetrieveDefinedEnvironmentRules();
        saveAndRetrieveConfiguration(stimulusId.getName(), stimulusId);

        stimulusId = saveAndRetrieveScaledRunIntensityRules();
        saveAndRetrieveConfiguration(stimulusId.getName(), stimulusId);

        stimulusId = saveSinkDefinedEnvironmentRules();
        saveAndRetrieveConfiguration(stimulusId.getName(), stimulusId);

        saveAndRetrieveConfiguration("no-stimulus", null);
    }

    @Test
    public void testGetCollectionNamesInGroupWithInvalidGroupName() throws Exception {
        List<String> names =
                manager.getCollectionNamesInGroup(
                        ParameterCollectionCategory.CONFIGURATION,
                        "missing-group");
        Assert.assertEquals("invalid number of collection names " +
                            "returned for non-existent group, names=" + names,
                            0, names.size());
    }

    @Test
    public void testGroupAndCollectionManagement() throws Exception {

        // Setup configuration as follows for tests:

        // configuration/test                           (from class setup)
        //               test-group-0                   (empty)
        //               test-group-1/test-collection-0 (no references)
        //                            test-collection-1 (no references)
        //                            test-collection-2 (no references)
        //               test-group-2/test-collection-0 (references b/s-g2-c0)
        //                            test-collection-1 (references b/s-g2-c1)
        //                            test-collection-2 (references b/s-g2-c2)

        // behavior/test                                (from class setup)
        //          test-group-0                        (empty)
        //          test-group-1/test-collection-0
        //                       test-collection-1
        //                       test-collection-2
        //          test-group-2/test-collection-0
        //                       test-collection-1
        //                       test-collection-2

        // stimulus/test                                (from class setup)
        //          test-group-0                        (empty)
        //          test-group-1/test-collection-0
        //                       test-collection-1
        //                       test-collection-2
        //          test-group-2/test-collection-0
        //                       test-collection-1
        //                       test-collection-2

        List<String> names;
        String groupName;
        ParameterCollectionId collectionId;
        ParameterCollectionId behaviorId;
        ParameterCollectionId stimulusId;
        String collectionName;
        Object collection = null;
        for (ParameterCollectionCategory category :
                ParameterCollectionCategory.values()) {
            for (int i = 0; i < 3; i++) {
                groupName = "test-group-" + i;
                manager.addGroup(category, groupName);
                names = manager.getGroupNamesInCategory(category);

                // check addGroup, getGroupNamesInCategory, and
                // getCollectionNamesInGroup

                Assert.assertEquals("incorrect number of group names for " +
                                    category + ", groupNames=" + names,
                                    (i+2), names.size());
                Assert.assertEquals("incorrect group name for " + category,
                                    groupName, names.get(i+1));

                if (i > 0) {
                    for (int j = 0; j < 3; j++) {
                        collectionName = "test-collection-" + j;
                        collectionId = new ParameterCollectionId(category,
                                                                 groupName,
                                                                 collectionName);
                        switch (category) {
                            case CONFIGURATION:
                                if (i == 2) {
                                    behaviorId = new ParameterCollectionId(
                                            ParameterCollectionCategory.BEHAVIOR,
                                            groupName,
                                            collectionName);
                                    stimulusId = new ParameterCollectionId(
                                            ParameterCollectionCategory.STIMULUS,
                                            groupName,
                                            collectionName);
                                } else {
                                    behaviorId = null;
                                    stimulusId = null;
                                }
                                collection = new Configuration(collectionId,
                                                               behaviorId,
                                                               stimulusId);
                                break;
                            case BEHAVIOR:
                                collection = new LarvaBehaviorParameters();
                                break;
                            case STIMULUS:
                                collection = new DefinedEnvironment(new LEDFlashPattern("33"),
                                                                    null,
                                                                    0.0);
                                break;
                        }

                        manager.saveCollection(collectionId, collection);
                    }

                    names = manager.getCollectionNamesInGroup(category,
                                                              groupName);
                    Assert.assertEquals("invalid number of collection names " +
                                        "returned for " + category +
                                        ", names=" + names,
                                        3, names.size());
                } else {
                    names = manager.getCollectionNamesInGroup(category,
                                                              groupName);
                    Assert.assertEquals("invalid number of collection names " +
                                        "returned for " + category +
                                        ", names=" + names,
                                        0, names.size());
                }
            }
        }

        // check rename empty group
        groupName = "test-group-0";
        for (ParameterCollectionCategory category :
                ParameterCollectionCategory.values()) {
            validateRenameGroup("after renaming empty group",
                                category, groupName, 1, 0);
        }

        // check rename unreferenced collection
        groupName = "test-group-1";
        collectionName = "test-collection-2";
        for (ParameterCollectionCategory category :
                ParameterCollectionCategory.values()) {
            validateRenameCollection(category, groupName, collectionName);
        }

        // check delete unreferenced collection
        collectionName = "test-collection-2-modified";
        for (ParameterCollectionCategory category :
                ParameterCollectionCategory.values()) {
            validateDeleteCollection(category, groupName, collectionName);
        }

        // check rename populated group
        for (ParameterCollectionCategory category :
                ParameterCollectionCategory.values()) {
            validateRenameGroup("after renaming populated group",
                                category, groupName, 2, 2);
        }

        // check rename referenced collection
        groupName = "test-group-2";
        collectionName = "test-collection-2";

        validateRenameCollection(ParameterCollectionCategory.BEHAVIOR,
                                 groupName,
                                 collectionName);
        validateRenameCollection(ParameterCollectionCategory.STIMULUS,
                                 groupName,
                                 collectionName);
        final String modifiedCollectionName = "test-collection-2-modified";

        collectionId = new ParameterCollectionId(
                ParameterCollectionCategory.CONFIGURATION,
                groupName,
                collectionName);
        Configuration updatedConfiguration =
                manager.getConfiguration(collectionId.getFullName());
        behaviorId = updatedConfiguration.getBehaviorParametersId();
        Assert.assertEquals("behavior parameters name not modified, " +
                            "behaviorId=" + behaviorId,
                            modifiedCollectionName, behaviorId.getName());

        stimulusId = updatedConfiguration.getStimulusParametersId();
        Assert.assertEquals("stimulus parameters name not modified, " +
                            "stimulusId=" + stimulusId,
                            modifiedCollectionName, stimulusId.getName());

        // check delete referenced collection
        try {
            manager.deleteCollection(
                    ParameterCollectionCategory.BEHAVIOR,
                    ParameterCollectionId.getFullCollectionName(groupName,
                                                                modifiedCollectionName));
            Assert.fail("delete of referenced behavior collection did not fail");
        } catch (IllegalArgumentException e) {
            System.out.println(
                    "delete referenced behavior collection test passed,\n" +
                    "exception message is:\n" + e.getMessage());
        }
        try {
            manager.deleteCollection(
                    ParameterCollectionCategory.STIMULUS,
                    ParameterCollectionId.getFullCollectionName(groupName,
                                                                modifiedCollectionName));
            Assert.fail("delete of referenced stimulus collection did not fail");
        } catch (IllegalArgumentException e) {
            System.out.println(
                    "delete referenced stimulus collection test passed,\n" +
                    "exception message is:\n" + e.getMessage());
        }
        manager.deleteCollection(
                ParameterCollectionCategory.CONFIGURATION,
                ParameterCollectionId.getFullCollectionName(groupName,
                                                            collectionName));

        // check rename referenced group
        validateRenameGroup("after renaming referenced group",
                            ParameterCollectionCategory.BEHAVIOR,
                            groupName, 3, 3);
        final String modifiedGroupName =
                validateRenameGroup("after renaming referenced group",
                            ParameterCollectionCategory.STIMULUS,
                            groupName, 3, 3);

        for (int j = 0; j < 2; j++) {
            collectionName = "test-collection-" + j;
            collectionId = new ParameterCollectionId(
                    ParameterCollectionCategory.CONFIGURATION,
                    groupName,
                    collectionName);
            updatedConfiguration =
                    manager.getConfiguration(collectionId.getFullName());

            behaviorId = updatedConfiguration.getBehaviorParametersId();
            Assert.assertEquals("behavior group name not modified, " +
                                "behaviorId=" + behaviorId,
                                modifiedGroupName, behaviorId.getGroupName());

            stimulusId = updatedConfiguration.getStimulusParametersId();
            Assert.assertEquals("stimulus group name not modified, " +
                                "stimulusId=" + stimulusId,
                                modifiedGroupName, stimulusId.getGroupName());
        }

        // delete empty group
        groupName = "test-group-0-modified";
        for (ParameterCollectionCategory category :
                ParameterCollectionCategory.values()) {
            validateDeleteGroup("after deleting empty group",
                                category, groupName, 3);
        }

        // delete unreferenced group
        groupName = "test-group-1-modified";
        for (ParameterCollectionCategory category :
                ParameterCollectionCategory.values()) {
            validateDeleteGroup("after deleting populated group",
                                category, groupName, 2);
        }

        // delete referenced group
        groupName = "test-group-2-modified";
        try {
            manager.deleteGroup(ParameterCollectionCategory.BEHAVIOR,
                                groupName);
            Assert.fail("delete of referenced behavior group did not fail");
        } catch (IllegalArgumentException e) {
            System.out.println(
                    "delete referenced behavior group test passed,\n" +
                    "exception message is:\n" + e.getMessage());
        }

        try {
            manager.deleteGroup(ParameterCollectionCategory.STIMULUS,
                                groupName);
            Assert.fail("delete of referenced stimulus group did not fail");
        } catch (IllegalArgumentException e) {
            System.out.println(
                    "delete referenced stimulus group test passed,\n" +
                    "exception message is:\n" + e.getMessage());
        }
    }

    private void validateRenameCollection(ParameterCollectionCategory category,
                                          String groupName,
                                          String collectionName) {

        final ParameterCollectionId fromId =
                new ParameterCollectionId(category, groupName, collectionName);
        final String modifiedName = collectionName + "-modified";
        final ParameterCollectionId toId =
                new ParameterCollectionId(category, groupName, modifiedName);

        manager.renameCollection(fromId, toId);

        List<String> names = manager.getCollectionNamesInGroup(category,
                                                               groupName);

        Assert.assertEquals("after rename of " + fromId +
                            ", incorrect number of collection names found, " +
                            "names=" + names,
                            3, names.size());

        if (ParameterCollectionCategory.CONFIGURATION.equals(category)) {
            String context = "after rename of " + fromId +
                             " to " + toId.getFullName();
            Configuration configuration =
                    manager.getConfiguration(toId.getFullName());
            Assert.assertNotNull(context + ", configuration is missing",
                                 configuration);
            Assert.assertEquals(context + ", configuration has invalid id",
                                toId, configuration.getId());
        }
    }

    private void validateDeleteCollection(ParameterCollectionCategory category,
                                          String groupName,
                                          String collectionName) {

        final String fullName =
                ParameterCollectionId.getFullCollectionName(groupName,
                                                            collectionName);
        manager.deleteCollection(category, fullName);

        List<String> names = manager.getCollectionNamesInGroup(category,
                                                               groupName);

        Assert.assertEquals("after delete of " + fullName +
                            ", incorrect number of collection names found for " +
                            groupName + ", names=" + names,
                            2, names.size());
    }

    private String validateRenameGroup(String context,
                                       ParameterCollectionCategory category,
                                       String groupName,
                                       int groupIndex,
                                       int collectionSize) {

        final String modifiedGroupName = groupName + "-modified";

        manager.renameGroup(category, groupName, modifiedGroupName);

        List<String> names = manager.getGroupNamesInCategory(category);

        Assert.assertEquals(context + ", incorrect number of group names for " +
                            category + ", groupNames=" + names,
                            4, names.size()
        );
        Assert.assertEquals(context + ", incorrect group name for " + category,
                            modifiedGroupName, names.get(groupIndex));

        names = manager.getCollectionNamesInGroup(category,
                                                  modifiedGroupName);
        Assert.assertEquals(context + ", invalid number of collection names " +
                            "returned for " + category + ", names=" + names,
                            collectionSize, names.size());

        if ((collectionSize > 0) &&
            (ParameterCollectionCategory.CONFIGURATION.equals(category))) {
            String fullName = names.get(0);
            Configuration configuration =
                    manager.getConfiguration(fullName);
            Assert.assertNotNull(context + ", configuration " + fullName +
                                 " is missing",
                                 configuration);
            Assert.assertEquals(context + ", configuration " + fullName +
                                " has invalid name in its stored id",
                                fullName, configuration.getId().getFullName());
        }

        return modifiedGroupName;
    }

    private void validateDeleteGroup(String context,
                                     ParameterCollectionCategory category,
                                     String groupName,
                                     int numberOfGroupsAfterDelete) {

        manager.deleteGroup(category, groupName);

        List<String> names = manager.getGroupNamesInCategory(category);

        Assert.assertEquals(context + ", incorrect number of group names for " +
                            category + ", groupNames=" + names,
                            numberOfGroupsAfterDelete, names.size());

        names = manager.getCollectionNamesInGroup(category, groupName);
        Assert.assertEquals(context + ", collection names found for " +
                            category + ", names=" + names,
                            0, names.size());
    }

    private ParameterCollectionId saveAndRetrieveBehaviorParameters() {

        final ParameterCollectionId id =
                new ParameterCollectionId(ParameterCollectionCategory.BEHAVIOR,
                                          TEST_GROUP,
                                          "default");
        LarvaBehaviorParameters parameters = new LarvaBehaviorParameters();
        parameters.setMinHeadAngleForCasting(12.0);

        manager.saveCollection(id, parameters);

        final LarvaBehaviorParameters retrievedParameters =
                manager.getBehaviorParameters(id);

        Assert.assertNotNull("failed to retrieve " + id,
                             retrievedParameters);

        Assert.assertEquals("invalid minimum head angle for casting",
                            parameters.getMinHeadAngleForCasting(),
                            retrievedParameters.getMinHeadAngleForCasting());

        return id;
    }

    private ParameterCollectionId saveAndRetrieveDefinedEnvironmentRules() {

        final ParameterCollectionId id =
                new ParameterCollectionId(ParameterCollectionCategory.STIMULUS,
                                          TEST_GROUP,
                                          "defined-environment-1");
        double[][] values = new double[400][400];
        for (int i = 0; i < 400; i++) {
            for (int j = 0; j < 400; j++) {
                values[i][j] = (double) i / 4;
            }
        }
        final PositionalVariableFunction pvFunction =
                new PositionalVariableFunction(PositionalVariable.HEAD,
                                               values);
        DefinedEnvironment rules =
                new DefinedEnvironment(new LEDFlashPattern("33"),
                                       pvFunction,
                                       0.0);

        manager.saveCollection(id, rules);

        final LarvaStimulusRules retrievedGenericRules =
                manager.getStimulusRules(id);

        if (retrievedGenericRules instanceof DefinedEnvironment) {

            final DefinedEnvironment retrievedRules =
                    (DefinedEnvironment) retrievedGenericRules;

            Assert.assertEquals(
                    "invalid defined environment LED activation duration",
                    rules.getLedActivationDuration(),
                    retrievedRules.getLedActivationDuration());

            final PositionalVariableFunction retrievedFunction =
                    retrievedRules.getIntensityFunction();

            Assert.assertEquals(
                    "invalid defined environment intensity function variable",
                    pvFunction.getVariable(),
                    retrievedFunction.getVariable());

            final double[][] retrievedValues = retrievedFunction.getValues();
            Assert.assertEquals(
                    "invalid defined environment values length",
                    values.length,
                    retrievedValues.length);

            Assert.assertEquals(
                    "invalid defined environment values[0] length",
                    values[0].length,
                    retrievedValues[0].length);

        } else if (retrievedGenericRules == null) {
            Assert.fail("retrieved defined environment rule is null");
        } else {
            Assert.assertEquals("invalid defined environment rule class ",
                                DefinedEnvironment.class.getName(),
                                retrievedGenericRules.getClass().getName());
        }

        return id;
    }

    private ParameterCollectionId saveSinkDefinedEnvironmentRules() {

        final ParameterCollectionId id =
                new ParameterCollectionId(ParameterCollectionCategory.STIMULUS,
                                          TEST_GROUP,
                                          "defined-environment-sink");
        final int size = 401;
        final int intensityCount = (size / 2) + 1; // assumes odd size
        double[][] values = new double[size][size];
        int min;
        int max;
        double intensity;
        for (int i = 0; i < intensityCount; i++) {
            min = i;
            max = size - i - 1;
            intensity = 100.0 -
                        ((double) (100 * i) / (double) (intensityCount - 1));
            for (int j = min; j <= max; j++) {
                values[min][j] = intensity;
                values[max][j] = intensity;
                values[j][min] = intensity;
                values[j][max] = intensity;
            }
        }

//        TestUtilities.printMatrix(values);

        final PositionalVariableFunction pvFunction =
                new PositionalVariableFunction(PositionalVariable.HEAD,
                                               values);
        DefinedEnvironment rules =
                new DefinedEnvironment(new LEDFlashPattern("33"),
                                       pvFunction,
                                       0.0);

        double[][] arena = rules.getArena(5, 5);
        TestUtilities.printMatrix(arena);

        manager.saveCollection(id, rules);

        return id;
    }

    private ParameterCollectionId saveAndRetrieveScaledRunIntensityRules() {

        final ParameterCollectionId id =
                new ParameterCollectionId(ParameterCollectionCategory.STIMULUS,
                                          TEST_GROUP,
                                          "scaled-run-1");
        double[] values = new double[60];
        for (int i = 0; i < values.length; i++) {
            values[i] = (double) i / (double) values.length;
        }
        SingleVariableFunction svf =
                new SingleVariableFunction(0,
                                           60000,
                                           OutOfRangeErrorHandlingMethod.END_SESSION_FOR_MINIMUM_AND_MAXIMUM,
                                           values);
        final ScaledRunIntensity rules =
                new ScaledRunIntensity(new LEDFlashPattern("33"),
                                       DEFAULT_NON_RUN_INTENSITY_VALUE,
                                       0.0,
                                       new IntensityValue(0.0),
                                       500,
                                       svf,
                                       0,
                                       false,
                                       0,
                                       new SingleVariableFunction(),
                                       0,
                                       new BehaviorLimitedKinematicVariableFunctionList());
        manager.saveCollection(id, rules);

        final LarvaStimulusRules retrievedGenericRules =
                manager.getStimulusRules(id);

        if (retrievedGenericRules instanceof ScaledRunIntensity) {

            final ScaledRunIntensity retrievedRules =
                    (ScaledRunIntensity) retrievedGenericRules;

            Assert.assertEquals(
                    "invalid scaled run LED activation duration",
                    rules.getLedActivationDuration(),
                    retrievedRules.getLedActivationDuration());

            final SingleVariableFunction retrievedSvf =
                    retrievedRules.getRunIntensityScalingFunction();
            Assert.assertEquals(
                    "invalid scaled run intensity function values length",
                    svf.getMaximumInputValue(),
                    retrievedSvf.getMaximumInputValue());

        } else if (retrievedGenericRules == null) {
            Assert.fail("retrieved rule is null");
        } else {
            Assert.assertEquals(
                    "invalid scaled run rule class ",
                    ScaledRunIntensity.class.getName(),
                    retrievedGenericRules.getClass().getName());
        }

        return id;
    }

    private void saveAndRetrieveConfiguration(String name,
                                              ParameterCollectionId stimulusId) {
        final ParameterCollectionId id = new ParameterCollectionId(
                ParameterCollectionCategory.CONFIGURATION,
                TEST_GROUP,
                name);
        final Configuration config = new Configuration(id,
                                                       behaviorId,
                                                       stimulusId);
        manager.saveCollection(config.getId(), config);

        final String configFullName = id.getFullName();
        final Configuration retrievedConfig =
                manager.getConfiguration(configFullName);

        Assert.assertNotNull("failed to retrieve " + configFullName,
                             retrievedConfig);

        Assert.assertEquals(
                "invalid behavior id retrieved for " + configFullName,
                behaviorId,
                retrievedConfig.getBehaviorParametersId());

        if (stimulusId == null) {
            Assert.assertNull(
                    "invalid rules id retrieved for " + configFullName,
                    retrievedConfig.getStimulusParametersId());
        } else {
            Assert.assertEquals(
                    "invalid rules id retrieved for " + configFullName,
                    stimulusId,
                    retrievedConfig.getStimulusParametersId());
        }
    }
}
